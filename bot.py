import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart
from datetime import datetime, timedelta
import asyncio

from config import TOKEN, ADMIN_GROUP_ID

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

user_data = {}  # user_id: {"start_date": datetime, "paid": bool}


# üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(CommandStart())
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"ID {user_id}"

    if user_id not in user_data:
        user_data[user_id] = {
            "start_date": datetime.now(),
            "paid": False
        }

    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, @{username}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ChatSaver Bot</b> ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, "
        f"—Å–∞–º–æ—É–¥–∞–ª—è—é—â–∏—Ö—Å—è –º–µ–¥–∏–∞ –∏ –≤—Å–µ–≥–æ —á–∞—Ç–∞.\n\n"
        f"üöÄ <b>–ß—Ç–æ –±–æ—Ç —É–º–µ–µ—Ç?</b>\n"
        f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üì•\n"
        f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∞–º–æ—É–¥–∞–ª—è—é—â–∏–µ—Å—è —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ üì∏\n"
        f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —É–¥–∞–ª—ë–Ω —É –≤—Å–µ—Ö üóëÔ∏è\n\n"
        f"üÜì –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n\n"
        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é üëá"
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚öôÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="activate")
    )

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


# üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
@dp.callback_query_handler(lambda c: c.data == "activate")
async def show_instruction(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = (
        "üìå <b>–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ChatSaver Bot:</b>\n\n"
        "1Ô∏è‚É£ –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ —Ä–∞–∑—Ä–µ—à–∏ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "2Ô∏è‚É£ –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞.\n"
        "3Ô∏è‚É£ –ü–æ—Å–ª–µ 7 –¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —á—Ç–æ-—Ç–æ —É–¥–∞–ª–∏—Ç ‚Äî "
        "—Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π üëÄ <b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</b>.\n"
        "4Ô∏è‚É£ –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è —Ç—ã —É–≤–∏–¥–∏—à—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        "üí≥ +7¬†932¬†222¬†99¬†30\nüè¶ Ozon Bank\nüí∞ 99‚ÇΩ/–º–µ—Å\n"
        "5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ <b>–û–ø–ª–∞—Ç–∏–ª(–∞)</b> ‚Äî –∏ –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é.\n\n"
        "üéâ –í—Å—ë –ø—Ä–æ—Å—Ç–æ –∏ —É–¥–æ–±–Ω–æ!"
    )
    await callback_query.message.answer(text, parse_mode="HTML")


# ‚õî –£–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
@dp.message_handler(content_types=types.ContentType.ANY)
async def handle_deleted_message(message: types.Message):
    user_id = message.from_user.id
    data = user_data.get(user_id)

    if not data:
        return

    now = datetime.now()
    start = data["start_date"]
    paid = data["paid"]

    if not paid and now > start + timedelta(days=7):
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="pay_info")
        )
        await message.answer(
            "‚ùó –ö—Ç–æ-—Ç–æ —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –æ–Ω–æ —Å–∫—Ä—ã—Ç–æ.\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
            reply_markup=keyboard
        )


# üí≥ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
@dp.callback_query_handler(lambda c: c.data == "pay_info")
async def show_payment_info(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = (
        "üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "+7 932 222 99 30\n"
        "üè¶ Ozon Bank\n"
        "üí∞ 99‚ÇΩ / –º–µ—Å\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ: <b>–û–ø–ª–∞—Ç–∏–ª(–∞)</b>."
    )
    await callback_query.message.answer(text, parse_mode="HTML")


# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(lambda m: m.text.lower() == "–æ–ø–ª–∞—Ç–∏–ª" or m.text.lower() == "–æ–ø–ª–∞—Ç–∏–ª(–∞)")
async def confirm_payment(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"ID {user_id}"
    text = f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ.\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é?"

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve_{user_id}")
    )

    await bot.send_message(chat_id=ADMIN_GROUP_ID, text=text, reply_markup=keyboard)


# üîì –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∞–¥–º–∏–Ω–æ–º
@dp.callback_query_handler(lambda c: c.data.startswith("approve_"))
async def approve_payment(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    user_data[user_id]["paid"] = True

    await bot.send_message(user_id, "‚úÖ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É. ü§ù")
    await callback_query.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ")


if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
