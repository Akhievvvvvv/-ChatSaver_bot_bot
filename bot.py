import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart

API_TOKEN = '7996519892:AAGl1jJS5pbOmJCBiJDiyYmhWqEmRn6ixmM'
ADMIN_GROUP_ID = -1002593269045
FREE_PERIOD_DAYS = 7

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

users = {}

def get_keyboard_start():
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚öôÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="activate_bot")
    )

def get_payment_keyboard():
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="view_payment")
    )

def get_confirm_keyboard(user_id):
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{user_id}")
    )

@dp.message_handler(CommandStart())
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    users[user_id] = {"start_time": datetime.now(), "active": True}

    welcome = f"""
üëã –ü—Ä–∏–≤–µ—Ç, @{username if username else '–¥—Ä—É–≥'}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ChatSaver Bot</b> ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –≤—Å–µ–≥–æ —á–∞—Ç–∞ üí¨‚ú®

üöÄ –ß—Ç–æ –±–æ—Ç —É–º–µ–µ—Ç?
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üì•
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∞–º–æ—É–¥–∞–ª—è—é—â–∏–µ—Å—è —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ üì∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —É–¥–∞–ª—ë–Ω —É –≤—Å–µ—Ö üóëÔ∏è

üÜì –ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî <b>–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞!</b>

–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ‚§µÔ∏è
"""
    await message.answer(welcome, reply_markup=get_keyboard_start(), parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data == "activate_bot")
async def activate_bot_callback(callback_query: types.CallbackQuery):
    instruction = """
üìå <b>–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ChatSaver Bot:</b>

1Ô∏è‚É£ –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ —Ä–∞–∑—Ä–µ—à–∏ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è  
2Ô∏è‚É£ –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω—ë—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞  
3Ô∏è‚É£ –ü–æ—Å–ª–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏ –±–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è  
4Ô∏è‚É£ –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å  
5Ô∏è‚É£ –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ—ë —Ç—ã —É–≤–∏–¥–∏—à—å –º–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:
üí≥ <code>+7 932 222 99 30</code> (Ozon Bank)  
üí∞ <b>99‚ÇΩ/–º–µ—Å</b>  
6Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ: <b>–û–ø–ª–∞—Ç–∏–ª(–∞)</b> ‚Äî –∏ –∞–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞ üõ†Ô∏è

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! ü§ñ
"""
    await callback_query.message.edit_text(instruction, parse_mode="HTML")

@dp.message_handler(lambda message: message.text.lower() == "–æ–ø–ª–∞—Ç–∏–ª(–∞)")
async def paid_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"id: {user_id}"
    text = f"üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>@{username}</b> –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ.\n\nID: <code>{user_id}</code>"

    await bot.send_message(ADMIN_GROUP_ID, text, parse_mode='HTML', reply_markup=get_confirm_keyboard(user_id))
    await message.reply("‚è≥ –°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_"))
async def confirm_payment_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    users[user_id]["active"] = True
    users[user_id]["start_time"] = datetime.now()
    await bot.send_message(user_id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É üíñ")

@dp.message_handler(content_types=types.ContentTypes.ANY)
async def handle_deleted_message(message: types.Message):
    user_id = message.from_user.id
    user_data = users.get(user_id)

    if not user_data:
        return

    start_time = user_data["start_time"]
    is_active = user_data["active"]
    if datetime.now() > start_time + timedelta(days=FREE_PERIOD_DAYS):
        if is_active:
            users[user_id]["active"] = False  # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
        await message.answer(
            "üîí –ö—Ç–æ-—Ç–æ —á—Ç–æ-—Ç–æ —É–¥–∞–ª–∏–ª, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ.\n\n"
            "–ù–∞–∂–º–∏ üëá —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø:",
            reply_markup=get_payment_keyboard()
        )

@dp.callback_query_handler(lambda c: c.data == "view_payment")
async def view_payment_callback(callback_query: types.CallbackQuery):
    text = """
üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>

üì± <code>+7 932 222 99 30</code>  
üè¶ <b>Ozon Bank</b>  
üí∞ <b>99‚ÇΩ / –º–µ—Å—è—Ü</b>

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏: <b>–û–ø–ª–∞—Ç–∏–ª(–∞)</b>, –∏ –∞–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É üôå
"""
    await callback_query.message.edit_text(text, parse_mode="HTML")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
