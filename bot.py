import telebot
from telebot import types
from datetime import datetime, timedelta

TOKEN = "7996519892:AAGl1jJS5pbOmJCBiJDiyYmhWqEmRn6ixmM"
ADMIN_GROUP_ID = -1002593269045

bot = telebot.TeleBot(TOKEN)
users = {}

def has_access(user_id):
    user = users.get(user_id)
    if not user:
        return False
    if user["paid"]:
        return True
    return (datetime.now() - user["start_date"]) < timedelta(days=7)

@bot.message_handler(commands=['start'])
def cmd_start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    now = datetime.now()

    if user_id not in users:
        users[user_id] = {"start_date": now, "paid": False}

    name = f"@{username}" if username else f"ID: {user_id}"
    text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *ChatSaver Bot* ‚Äî —Ç–≤–æ–π –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:
üì• –£–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π  
üì∏ –°–∞–º–æ—É–¥–∞–ª—è—é—â–∏—Ö—Å—è –º–µ–¥–∏–∞  
üóëÔ∏è –ß–∞—Ç–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É–¥–∞–ª–µ–Ω—ã —É –≤—Å–µ—Ö

üÜì –£ —Ç–µ–±—è –µ—Å—Ç—å *–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è* –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!  
–ü–æ—Å–ª–µ 7 –¥–Ω–µ–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî *99‚ÇΩ –≤ –º–µ—Å—è—Ü*.

–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:
"""
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="show_instructions"))
    bot.send_message(user_id, text, parse_mode='Markdown', reply_markup=kb)

@bot.callback_query_handler(lambda c: c.data == "show_instructions")
def show_instructions(call):
    instructions = """üìå *–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ChatSaver Bot:*

1Ô∏è‚É£ –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ —Ä–∞–∑—Ä–µ—à–∏ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.  
2Ô∏è‚É£ –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞.  
3Ô∏è‚É£ –ï—Å–ª–∏ —É–¥–∞–ª–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ ‚Äî –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π üëÄ _–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å_.  
4Ô∏è‚É£ –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ—ë —Ç—ã —É–≤–∏–¥–∏—à—å –º–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:  
üí≥ +7¬†932¬†222¬†99¬†30 (Ozon Bank), 99‚ÇΩ/–º–µ—Å  
5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç *–û–ø–ª–∞—Ç–∏–ª(–∞)*, –∏ –∞–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø.

üõ† –í—Å—ë –ø—Ä–æ—Å—Ç–æ, –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –∏ —É–¥–æ–±–Ω–æ!"""
    bot.send_message(call.from_user.id, instructions, parse_mode='Markdown')

@bot.message_handler(lambda m: not has_access(m.from_user.id))
def blocked_handler(message):
    text = "‚ùó –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n"
    bot.send_message(message.from_user.id, text)

@bot.message_handler(lambda m: has_access(m.from_user.id) and m.text and "deleted_test:" in m.text)
def simulate_deleted(message):
    # —ç–º—É–ª—è—Ü–∏—è: –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ "deleted_test: <—Ç–µ–∫—Å—Ç>" ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    deleted_text = message.text.split("deleted_test:",1)[1].strip()
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="view_payment"))
    bot.send_message(message.from_user.id,
                     f"‚ö†Ô∏è –ö—Ç–æ-—Ç–æ —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{deleted_text}\n" +
                     "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ —Å–∫—Ä—ã—Ç–æ.",
                     reply_markup=kb)

@bot.callback_query_handler(lambda c: c.data == "view_payment")
def show_payment(call):
    payment_info = """üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*

+7¬†932¬†222¬†99¬†30  
Ozon Bank  
–°—É–º–º–∞: 99‚ÇΩ –≤ –º–µ—Å—è—Ü

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ _–û–ø–ª–∞—Ç–∏–ª(–∞)_ ‚Äî –∏ –∞–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É."""
    bot.send_message(call.from_user.id, payment_info, parse_mode='Markdown')

@bot.message_handler(lambda m: m.text and m.text.lower() in ["–æ–ø–ª–∞—Ç–∏–ª", "–æ–ø–ª–∞—Ç–∏–ª(–∞)"])
def handle_paid(message):
    uid = message.from_user.id
    username = message.from_user.username or str(uid)
    now = datetime.now().strftime("%Y‚Äë%m‚Äë%d %H:%M:%S")
    users.setdefault(uid, {"start_date": now, "paid": False})
    msg = (f"üí∏ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ!*\n\n"
           f"üë§ @{username}\n"
           f"üÜî {uid}\n"
           f"üïí {now}\n"
           f"–°—É–º–º–∞: 99‚ÇΩ")
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{uid}"))
    bot.send_message(ADMIN_GROUP_ID, msg, parse_mode='Markdown', reply_markup=kb)
    bot.send_message(uid, "‚åõ –°–ø–∞—Å–∏–±–æ! –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@bot.callback_query_handler(lambda c: c.data.startswith("confirm_"))
def confirm_call(call):
    uid = int(call.data.split("_")[1])
    users[uid]["paid"] = True
    bot.send_message(uid, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π üéâ")
    bot.send_message(ADMIN_GROUP_ID, f"üîì –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {uid} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

print("ü§ñ Bot is running...")
bot.infinity_polling()
